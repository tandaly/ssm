<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:p="http://www.springframework.org/schema/p"
     xmlns:cache="http://www.springframework.org/schema/cache"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/cache
	 http://www.springframework.org/schema/cache/spring-cache.xsd
     ">

	<!-- 读取属性配置文件 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> <list> <value>/WEB-INF/classes/jdbc.properties</value> 
		</list> </property> </bean> -->
	<context:property-placeholder location="classpath:jdbc.properties, classpath:properties/project.properties" />
	
	<!--数据源 boneCP连接池-->
	<bean id="boneCpDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        
       <property name="idleConnectionTestPeriod" value="60"/>
	   <property name="idleMaxAge" value="240"/>
	   <property name="maxConnectionsPerPartition" value="30"/>
	   <property name="minConnectionsPerPartition" value="10"/>
	   <property name="partitionCount" value="3"/>
	   <property name="acquireIncrement" value="5"/>
	   <property name="statementsCacheSize" value="100"/>
    </bean>
	
	<!--数据源 druid连接池-->
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}" />
		
		<property name="filters" value="stat" />
		
		<property name="maxActive" value="20"/>
		<property name="initialSize" value="1"/>
		<property name="maxWait" value="60000"/>
		<property name="minIdle" value="1"/>
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxOpenPreparedStatements" value="20"/>
	</bean> 
	
	<!-- 数据源 C3P0连接池 -->
	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.url}"/>
        <property name="jdbcUrl" value="${jdbc.driverClassName}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
		
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>
	
     <!--
    <bean id="dataSourceDbcp" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
  
        <property name="driverClassName" value="${driverClassName}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
          
        <property name="maxActive" value="${maxActive}" />  
        <property name="minIdle" value="${minIdle}" />  
        <property name="maxWait" value="${maxWait}" />  
        <property name="defaultAutoCommit" value="true" />  
          
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />  
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
          
        <property name="validationQuery" value="${validationQuery}" />  
        <property name="testWhileIdle" value="${testWhileIdle}" />  
        <property name="testOnBorrow" value="${testOnBorrow}" />  
        <property name="testOnReturn" value="${testOnReturn}" />  
        <property name="maxOpenPreparedStatements"  
            value="${maxOpenPreparedStatements}" />  
        <property name="removeAbandoned" value="${removeAbandoned}" />   
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />  
        <property name="logAbandoned" value="${logAbandoned}" />  
    </bean> 
	-->

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource" />
    </bean>

    <!-- 开启组件扫描-->    
    <context:component-scan base-package="com.tanf" />

    <!-- 开启 autowire -->
    <context:annotation-config />

    <!-- 开启事务注解 -->
    <tx:annotation-driven />

    <!-- 定义 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource" />
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->  
        <property name="typeAliasesPackage" value="com.tanf.system.admin.beans" />
    </bean>

    <!-- 扫描mappers 让它们被用户注入 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<!--basePackage指定要扫描的包，在此包之下的映射器都会被  
     		搜索到。可指定多个包，包与包之间用逗号或分号分隔--> 
        <property name="basePackage" value="com.tanf.system.admin.dao" />
    </bean>
    
    <!--自定义 实现BeanFactoryAware接口，把该接口配置到spring中，然后把getbean方法写成静态的，就可以动态获取-->
	<bean class="com.tanf.core.spring.SpringFactory"/>
	
	
	
	<!--***********数据库管理配置start**************** -->
	
	<!-- 数据库管理数据源 
  	<bean id="dbDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
     	<property name="driverClassName">
	   		<value>com.mysql.jdbc.Driver</value>
	  	</property>
	  	<property name="url">
	   		<value>jdbc:MYSQL://127.0.0.1:3307/information_schema?characterEncoding=utf8</value>
	  	</property>
	  	<property name="username">
	   		<value>root</value>
	  	</property>
	  	<property name="password">
	   		<value>root</value>
	  	</property>
    </bean>
    -->
    <!-- 定义 SqlSessionFactory 
    <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dbDataSource" />
    </bean>-->
	<!--***********数据库管理配置end**************** -->
	
	
	<!--
	  事件监听:实现了 ApplicationListener监听接口,
	  包括AuthenticationCredentialsNotFoundEvent 事件，
	  AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事件。 
	  -->
	 <bean class="org.springframework.security.authentication.event.LoggerListener" />
	
	 <!-- 用户的密码加密或解密 
	 <bean id="passwordEncoder"
	  class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	-->
	   
	 <!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 
	 <bean id="userDetailsManager" class="com.tanf.core.security.MyUserDetailsService">
	  <property name="pubUsersHome" ref="pubUsersHome" />
	  <property name="pubAuthoritiesResourcesHome" ref="pubAuthoritiesResourcesHome" />
	  <property name="dataSource" ref="dataSource" />
	  <property name="userCache" ref="userCache" />
	 </bean>  
	 -->
	 
	 <!-- 启用用户的缓存功能 
	 <bean id="userCache"
	  class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
	  <property name="cache" ref="userEhCache" />
	 </bean>
	 
	 <bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
	  <property name="cacheName" value="userCache" />
	  <property name="cacheManager" ref="cacheManager" />
	 </bean>
	 
	 <bean id="cacheManager"
	  class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
	-->
	
	 <!-- spring security自带的与权限有关的数据读写Jdbc模板 
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	  <property name="dataSource" ref="druidDataSource" />
	 </bean>
	-->
	
	<!-- 缓存注解驱动 
	<cache:annotation-driven />
	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:configLocation="classpath:ehcache.xml"
		p:shared="false" />
		
	<bean id="EhCacheCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cacheManager-ref="cacheManager"/>
	-->
</beans>
