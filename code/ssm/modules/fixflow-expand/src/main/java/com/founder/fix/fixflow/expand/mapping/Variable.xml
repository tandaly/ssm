<?xml version="1.0" encoding="UTF-8"?>
<sqlmappingconfig:RulesConfig id="variable" xmlns:sqlmappingconfig="http://www.founderfix.com/sqlmappingconfig">



	<dataBaseTable tableId="fixflow_run_variable" tableName="变量表" tableValue="FIXFLOW_RUN_VARIABLE" archiveTable = "FIXFLOW_HIS_VARIABLE">
		<column column="PROCESSINSTANCE_ID" name="流程实例编号" jdbcType="VARCHAR" />
		<column column="VARIABLE_KEY" name="变量key" jdbcType="VARCHAR" />
		<column column="VARIABLE_VALUE" name="变量值" jdbcType="VARCHAR" />
		<column column="VARIABLE_CLASSNAME" name="变量类全名" jdbcType="VARCHAR" />
		<column column="TASKINSTANCE_ID" name="任务编号" jdbcType="VARCHAR" />
		<column column="TOKEN_ID" name="令牌号" jdbcType="VARCHAR" />
		<column column="NODE_ID" name="节点编号" jdbcType="VARCHAR" />
		<column column="VARIABLE_TYPE" name="变量业务类型" jdbcType="VARCHAR" />
		<column column="BIZ_DATA" name="业务查询数据" jdbcType="VARCHAR" />
		<column column="ARCHIVE_TIME" name="归档时间" jdbcType="VARCHAR" />
	</dataBaseTable>


	<!-- 任务表 -->
	<resultMap id="variableResultMap" name="任务表" type="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity">
		<result property="processInstanceId" column="PROCESSINSTANCE_ID" name="流程实例编号" jdbcType="VARCHAR" />
		<result property="variableKey" column="VARIABLE_KEY" name="变量key" jdbcType="VARCHAR" />
		<result property="variableValue" column="VARIABLE_VALUE" name="变量值" jdbcType="VARBINARY" />
		<result property="variableClassName" column="VARIABLE_CLASSNAME" name="变量类全名" jdbcType="VARCHAR" />
		<result property="taskInstanceId" column="TASKINSTANCE_ID" name="任务编号" jdbcType="VARCHAR" />
		<result property="tokenId" column="TOKEN_ID" name="令牌号" jdbcType="VARCHAR" />
		<result property="nodeId" column="NODE_ID" name="节点编号" jdbcType="VARCHAR" />
		<result property="variableType" column="VARIABLE_TYPE" name="变量业务类型" jdbcType="VARCHAR" />
		<result property="variableType" column="BIZ_DATA" name="业务查询数据" jdbcType="VARCHAR" />
		<result property="archiveTime" column="ARCHIVE_TIME" name="归档时间" jdbcType="TIMESTAMP" />
	</resultMap>

	<insert id="insertVariable" 
	parameterType="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity" 
	classPath="com.founder.fix.fixflow.expand.rulescript.insert.InsertVariable"
	remark="插入变量"/>


	<delete id="deleteVariable" parameterType="com.founder.fix.fixflow.core.impl.command.QueryVariablesCommand" remark="备注">
		<![CDATA[ 
		import com.founder.fix.fixflow.expand.database.TableUtil;
		if (parameter == null) {
			return;
		}
		variableNames = parameter.getVariableNames();

		sqlWhereQueryString = "";
		// 构建查询参数
		objectParamWhere = new ArrayList<Object>();

		processInstanceId = parameter.getProcessInstanceId();
		tokenId = parameter.getTokenId();
		taskInstanceId = parameter.getTaskInstanceId();
		nodeId = parameter.getNodeId();

		if (processInstanceId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " PROCESSINSTANCE_ID IS NULL AND ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " PROCESSINSTANCE_ID=? AND ";
			objectParamWhere.add(processInstanceId);
		}

		if (tokenId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " TOKEN_ID IS NULL AND ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " TOKEN_ID=? AND";
			objectParamWhere.add(tokenId);
		}

		if (taskInstanceId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " TASKINSTANCE_ID IS NULL AND ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " TASKINSTANCE_ID=? AND ";
			objectParamWhere.add(taskInstanceId);
		}

		if (nodeId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " NODE_ID IS NULL ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " NODE_ID=? ";
			objectParamWhere.add(nodeId);
		}

		if (variableNames != null) {
			if (variableNames.size() > 0) {
				sqlWhereQueryString = sqlWhereQueryString + " AND (";
			}

			for (int i = 0; i < variableNames.size(); i++) {

				String variableName = variableNames.get(i);

				if (i == variableNames.size() - 1) {
					sqlWhereQueryString = sqlWhereQueryString + " VARIABLE_KEY=? ";
				} else {
					sqlWhereQueryString = sqlWhereQueryString + " VARIABLE_KEY=? OR ";
				}

				objectParamWhere.add(variableName);
			}

			if (variableNames.size() > 0) {
				sqlWhereQueryString = sqlWhereQueryString + " )";
			}
		}

		// 构建Where查询参数
		Object[] objectParamObj = new Object[objectParamWhere.size()];
		for (int i = 0; i < objectParamWhere.size(); i++) {
			objectParamObj[i] = objectParamWhere.get(i);
		}
		sqlCommand.delete(TableUtil.getVariableRunTableName(), sqlWhereQueryString, objectParamObj);
		
		]]>

	</delete>
	
	
	<update id="updateVariable" 
	parameterType="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity" 
	classPath="com.founder.fix.fixflow.expand.rulescript.update.UpdateVariable"
	remark="备注"/>

	<select id="selectVariableByQuery" parameterType="com.founder.fix.fixflow.core.impl.db.ListQueryParameterObject" resultMap="variableResultMap" remark="查询编号">
		
		<![CDATA[ 
		import com.founder.fix.fixflow.core.impl.db.SqlQuery;
		import com.founder.fix.fixflow.expand.database.TableUtil;
		import com.founder.fix.fixflow.core.impl.command.QueryVariablesCommand;
		

		SqlQuery sqlQuery=new SqlQuery();
		queryVariablesCommand=(QueryVariablesCommand)parameter.getParameter();

		variableNames = queryVariablesCommand.getVariableNames();

		sqlWhereQueryString = "";
		// 构建查询参数
		objectParamWhere = new ArrayList<Object>();

		processInstanceId = queryVariablesCommand.getProcessInstanceId();
		tokenId = queryVariablesCommand.getTokenId();
		taskInstanceId = queryVariablesCommand.getTaskInstanceId();
		nodeId = queryVariablesCommand.getNodeId();

		if (processInstanceId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " PROCESSINSTANCE_ID IS NULL AND ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " PROCESSINSTANCE_ID=? AND ";
			objectParamWhere.add(processInstanceId);
		}

		if (tokenId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " TOKEN_ID IS NULL AND ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " TOKEN_ID=? AND";
			objectParamWhere.add(tokenId);
		}

		if (taskInstanceId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " TASKINSTANCE_ID IS NULL AND ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " TASKINSTANCE_ID=? AND ";
			objectParamWhere.add(taskInstanceId);
		}

		if (nodeId == null) {
			sqlWhereQueryString = sqlWhereQueryString + " NODE_ID IS NULL ";
		} else {
			sqlWhereQueryString = sqlWhereQueryString + " NODE_ID=? ";
			objectParamWhere.add(nodeId);
		}

		if (variableNames != null) {
			if (variableNames.size() > 0) {
				sqlWhereQueryString = sqlWhereQueryString + " AND (";
			}

			for (int i = 0; i < variableNames.size(); i++) {

				variableName = variableNames.get(i);

				if (i == variableNames.size() - 1) {
					sqlWhereQueryString = sqlWhereQueryString + " VARIABLE_KEY=? ";
				} else {
					sqlWhereQueryString = sqlWhereQueryString + " VARIABLE_KEY=? OR ";
				}

				objectParamWhere.add(variableName);
			}

			if (variableNames.size() > 0) {
				sqlWhereQueryString = sqlWhereQueryString + " )";
			}
		}

		// 构建Where查询参数
		objectParamObj = new Object[objectParamWhere.size()];
		for (int i = 0; i < objectParamWhere.size(); i++) {
			objectParamObj[i] = objectParamWhere.get(i);
		}

		// 设置查询字符串
		sqlText = "SELECT * FROM "+TableUtil.getVariableRunTableName()+"  WHERE " + sqlWhereQueryString;

		sqlQuery.queryList(sqlText, objectParamWhere);

		]]>
		
	</select>




	<businessRules id="getVariablePersistentDbMap" 
	parameterType="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity" 
	resultType="java.util.Map" 
	classPath="com.founder.fix.fixflow.expand.rulescript.entity.VariablePersistentDbMap"
	remark="返回Task对象需要保存到数据的字段Map"/>
	



	<businessRules id="getVariablePersistentState" parameterType="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity" resultType="java.util.Map" remark="将Task对象转换成Map用来数据传递">
	<![CDATA[ 
	
		persistentState = new HashMap<String, Object>();
		persistentState.put("processInstanceId", parameter.getProcessInstanceId());		
		persistentState.put("variableKey", parameter.getVariableKey());		
		persistentState.put("variableValue", parameter.getVariableValue());
		persistentState.put("variableClassName", parameter.getVariableClassName());
		persistentState.put("taskInstanceId", parameter.getTaskInstanceId());
		persistentState.put("tokenId", parameter.getTokenId());	
		persistentState.put("nodeId", parameter.getNodeId());		
		persistentState.put("variableType", parameter.getVariableType());
		persistentState.put("bizData", parameter.getBizData());
		persistentState.put("archive_time", parameter.getArchiveTime());
		
		extensionFields=parameter.getExtensionFields();	
			
		for (String key : extensionFields.keySet()) {
			persistentState.put(key, extensionFields.get(key));
		}
		return persistentState;
		
	]]>
	</businessRules>

	<businessRules id="variableClone" parameterType="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity" resultType="com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity"
		remark="变量实例拷贝">
	<![CDATA[ 
		import com.founder.fix.fixflow.core.impl.datavariable.DataVariableEntity;
		dataVariableEntityNew = new DataVariableEntity();
		dataVariableEntityNew.persistentInit(sysRulesConfig.getResultMap("variableResultMap"),parameter.getPersistentDbMap());
		return dataVariableEntityNew;
		
	]]>
	</businessRules>



</sqlmappingconfig:RulesConfig>
